// ignore_for_file: require_trailing_commas

import 'package:flutter/widgets.dart';
import 'package:spot/spot.dart';

/// Matchers for [Icon] auto-generated by spot
///
/// ```dart
/// spot<Icon>().printMatchers();
/// ```
extension IconMatcher on WidgetMatcher<Icon> {
  WidgetMatcher<Icon> hasIconWhere(MatchProp<IconData> match) {
    return hasProp<IconData>('icon', match);
  }
  
  WidgetMatcher<Icon> hasIcon(IconData value) {
    return hasProp<IconData>('icon', (it) => it.equals(value));
  }

  WidgetMatcher<Icon> hasSizeWhere(MatchProp<double> match) {
    return hasProp<double>('size', match);
  }
  
  WidgetMatcher<Icon> hasSize(double value) {
    return hasProp<double>('size', (it) => it.equals(value));
  }

  WidgetMatcher<Icon> hasFillWhere(MatchProp<double> match) {
    return hasProp<double>('fill', match);
  }
  
  WidgetMatcher<Icon> hasFill(double value) {
    return hasProp<double>('fill', (it) => it.equals(value));
  }

  WidgetMatcher<Icon> hasWeightWhere(MatchProp<double> match) {
    return hasProp<double>('weight', match);
  }
  
  WidgetMatcher<Icon> hasWeight(double value) {
    return hasProp<double>('weight', (it) => it.equals(value));
  }

  WidgetMatcher<Icon> hasGradeWhere(MatchProp<double> match) {
    return hasProp<double>('grade', match);
  }
  
  WidgetMatcher<Icon> hasGrade(double value) {
    return hasProp<double>('grade', (it) => it.equals(value));
  }

  WidgetMatcher<Icon> hasOpticalSizeWhere(MatchProp<double> match) {
    return hasProp<double>('opticalSize', match);
  }
  
  WidgetMatcher<Icon> hasOpticalSize(double value) {
    return hasProp<double>('opticalSize', (it) => it.equals(value));
  }

  WidgetMatcher<Icon> hasColorWhere(MatchProp<Color> match) {
    return hasProp<Color>('color', match);
  }
  
  WidgetMatcher<Icon> hasColor(Color value) {
    return hasProp<Color>('color', (it) => it.equals(value));
  }

  WidgetMatcher<Icon> hasShadowsWhere(MatchProp<Shadow> match) {
    return hasProp<Shadow>('shadows', match);
  }
  
  WidgetMatcher<Icon> hasShadows(Shadow value) {
    return hasProp<Shadow>('shadows', (it) => it.equals(value));
  }

  WidgetMatcher<Icon> hasSemanticLabelWhere(MatchProp<String> match) {
    return hasProp<String>('semanticLabel', match);
  }
  
  WidgetMatcher<Icon> hasSemanticLabel(String value) {
    return hasProp<String>('semanticLabel', (it) => it.equals(value));
  }

  WidgetMatcher<Icon> hasTextDirectionWhere(MatchProp<TextDirection> match) {
    return hasProp<TextDirection>('textDirection', match);
  }
  
  WidgetMatcher<Icon> hasTextDirection(TextDirection value) {
    return hasProp<TextDirection>('textDirection', (it) => it.equals(value));
  }

}

extension IconSelector on WidgetSelector<Icon> {
  WidgetSelector<Icon> withIconMatching(MatchProp<IconData> match) {
    return withProp<IconData>('icon', match);
  }
  
  WidgetSelector<Icon> withIcon(IconData value) {
    return withProp<IconData>('icon', (it) => it.equals(value));
  }

  WidgetSelector<Icon> withSizeMatching(MatchProp<double> match) {
    return withProp<double>('size', match);
  }
  
  WidgetSelector<Icon> withSize(double value) {
    return withProp<double>('size', (it) => it.equals(value));
  }

  WidgetSelector<Icon> withFillMatching(MatchProp<double> match) {
    return withProp<double>('fill', match);
  }
  
  WidgetSelector<Icon> withFill(double value) {
    return withProp<double>('fill', (it) => it.equals(value));
  }

  WidgetSelector<Icon> withWeightMatching(MatchProp<double> match) {
    return withProp<double>('weight', match);
  }
  
  WidgetSelector<Icon> withWeight(double value) {
    return withProp<double>('weight', (it) => it.equals(value));
  }

  WidgetSelector<Icon> withGradeMatching(MatchProp<double> match) {
    return withProp<double>('grade', match);
  }
  
  WidgetSelector<Icon> withGrade(double value) {
    return withProp<double>('grade', (it) => it.equals(value));
  }

  WidgetSelector<Icon> withOpticalSizeMatching(MatchProp<double> match) {
    return withProp<double>('opticalSize', match);
  }
  
  WidgetSelector<Icon> withOpticalSize(double value) {
    return withProp<double>('opticalSize', (it) => it.equals(value));
  }

  WidgetSelector<Icon> withColorMatching(MatchProp<Color> match) {
    return withProp<Color>('color', match);
  }
  
  WidgetSelector<Icon> withColor(Color value) {
    return withProp<Color>('color', (it) => it.equals(value));
  }

  WidgetSelector<Icon> withShadowsMatching(MatchProp<Shadow> match) {
    return withProp<Shadow>('shadows', match);
  }
  
  WidgetSelector<Icon> withShadows(Shadow value) {
    return withProp<Shadow>('shadows', (it) => it.equals(value));
  }

  WidgetSelector<Icon> withSemanticLabelMatching(MatchProp<String> match) {
    return withProp<String>('semanticLabel', match);
  }
  
  WidgetSelector<Icon> withSemanticLabel(String value) {
    return withProp<String>('semanticLabel', (it) => it.equals(value));
  }

  WidgetSelector<Icon> withTextDirectionMatching(MatchProp<TextDirection> match) {
    return withProp<TextDirection>('textDirection', match);
  }
  
  WidgetSelector<Icon> withTextDirection(TextDirection value) {
    return withProp<TextDirection>('textDirection', (it) => it.equals(value));
  }

}
    
    