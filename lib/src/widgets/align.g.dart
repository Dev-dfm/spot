// ignore_for_file: require_trailing_commas

 import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:spot/spot.dart';

/// Matchers for [Align] auto-generated by spot
///
/// ```dart
/// spot<Align>().printMatchers();
/// ```
extension AlignMatcher on WidgetMatcher<Align> {
  WidgetMatcher<Align> hasAlignmentWhere(MatchProp<AlignmentGeometry> match) {
    return hasProp<AlignmentGeometry>('alignment', match);
  }
  
  WidgetMatcher<Align> hasAlignment(AlignmentGeometry value) {
    return hasProp<AlignmentGeometry>('alignment', (it) => it.equals(value));
  }

  WidgetMatcher<Align> hasWidthFactorWhere(MatchProp<double> match) {
    return hasProp<double>('widthFactor', match);
  }
  
  WidgetMatcher<Align> hasWidthFactor(double value) {
    return hasProp<double>('widthFactor', (it) => it.equals(value));
  }

  WidgetMatcher<Align> hasHeightFactorWhere(MatchProp<double> match) {
    return hasProp<double>('heightFactor', match);
  }
  
  WidgetMatcher<Align> hasHeightFactor(double value) {
    return hasProp<double>('heightFactor', (it) => it.equals(value));
  }

  WidgetMatcher<Align> hasRenderObjectWhere(MatchProp<RenderPositionedBox> match) {
    return hasProp<RenderPositionedBox>('renderObject', match);
  }
  
  WidgetMatcher<Align> hasRenderObject(RenderPositionedBox value) {
    return hasProp<RenderPositionedBox>('renderObject', (it) => it.equals(value));
  }

}

extension AlignSelector on WidgetSelector<Align> {
  WidgetSelector<Align> withAlignmentMatching(MatchProp<AlignmentGeometry> match) {
    return withProp<AlignmentGeometry>('alignment', match);
  }
  
  WidgetSelector<Align> withAlignment(AlignmentGeometry value) {
    return withProp<AlignmentGeometry>('alignment', (it) => it.equals(value));
  }

  WidgetSelector<Align> withWidthFactorMatching(MatchProp<double> match) {
    return withProp<double>('widthFactor', match);
  }
  
  WidgetSelector<Align> withWidthFactor(double value) {
    return withProp<double>('widthFactor', (it) => it.equals(value));
  }

  WidgetSelector<Align> withHeightFactorMatching(MatchProp<double> match) {
    return withProp<double>('heightFactor', match);
  }
  
  WidgetSelector<Align> withHeightFactor(double value) {
    return withProp<double>('heightFactor', (it) => it.equals(value));
  }

  WidgetSelector<Align> withRenderObjectMatching(MatchProp<RenderPositionedBox> match) {
    return withProp<RenderPositionedBox>('renderObject', match);
  }
  
  WidgetSelector<Align> withRenderObject(RenderPositionedBox value) {
    return withProp<RenderPositionedBox>('renderObject', (it) => it.equals(value));
  }

}
    
    